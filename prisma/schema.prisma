// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  username         String?        @unique
  password         String
  salt             String?
  role             UserRole       @default(USER)
  avatarUrl        String?
  birthdate        DateTime?
  firstName        String?
  lastName         String?
  bio              String?
  gender           Gender         @default(UNKNOWN)
  isAccountSetup   Boolean
  creations        Novel[]
  library          Library?
  notifications    Notification[]
  favouriteGenres NovelGenre[]
  likes            Like[]
  comments         Comment[]
}

model Library {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int      @unique
  novels    Novel[]
}

model Novel {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  coverUrl    String?
  title       String
  description String
  genre       NovelGenre  @default(UNKNOWN)
  status      NovelStatus @default(DRAFT)
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int
  isMature    Boolean
  chapters    Chapter[]
  Library     Library[]
  libraryId   Int?
}

model Chapter {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String
  body      String
  order       Int         @default(0)
  status    ChapterStatus @default(DRAFT)
  novel     Novel?        @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   Int?
  likes     Like[]
  comments  Comment[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  body      String
  target    User     @relation(fields: [targetId], references: [id])
  targetId  Int
  seen      Boolean
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  body      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId Int
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum NovelStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
  BANNED
}

enum ChapterStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
  BANNED
}

enum NovelGenre {
  UNKNOWN
  FANTASY
  HORROR
  ACTION
  ADVENTURE
  TRADITIONAL
  ROMANCE
}
